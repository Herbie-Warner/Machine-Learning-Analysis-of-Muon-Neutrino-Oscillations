# -*- coding: utf-8 -*-
"""
Created on Mon Nov 27 13:14:03 2023


best: indiv = {'topological_score': [0.11409471984340669, 0.30403893056424736], 'trk_len_v': [0.6, 650], 'trk_distance_v': [[0.06369849956917761, 1.8644284460335303], [1.8922278674529966, 2.1790664883833877], [2.615724782008579, 2.920829081155114], [2.9964566034803175, 3.006100998063469], [3.3802339912276596, 4.118191905071383], [4.380811974594002, 4.6538569232647475], [4.732400702577313, 4.808842369282162], [5.268243180096821, 5.666626635996429], [5.672328771545283, 6.302632341765945], [6.347970477921233, 6.38048641850676], [6.622217093914209, 6.968775850597668], [7.0013295386606815, 7.350463101761461], [7.860446826806208, 7.906914746863745]], 'trk_score_v': [0.75, 1], 'trk_mcs_muon_mom_v': [0, 1.6]}

best indiv GA: indiv = {'topological_score': [[0.058598886185362575, 0.06240106149714231], [0.12772334629593973, 0.1401462978491672], [0.1921623445370394, 0.1946791150120314], [0.1978893136119494, 0.20973229990189324], [0.21166186171716617, 0.22096207878964302], [0.2772152634098368, 0.30450501396836926], [0.3535510357776539, 0.3539468241054684], [0.3684484333172089, 0.4594657167105539], [0.47179169826168255, 0.5039259387026114], [0.5240156596044618, 0.5297284964210033], [0.5761222958952391, 0.5939079598482874], [0.6227719393769467, 0.6387544065631309], [0.6547971685831182, 0.6832235048546967], [0.7295612620852331, 0.7311675380530319], [0.7701580729262756, 0.8299919688290477], [0.8359510581889456, 0.8838586781038752], [0.9455024508024313, 0.9549759034696558]], 'trk_len_v': [0.6, 650], 'trk_distance_v': [0.0, 8], 'trk_score_v': [0.75, 1], 'trk_mcs_muon_mom_v': [0, 1.6]}
next GA best: indiv = {'topological_score': [[0.058598886185362575, 0.06240106149714231], [0.12772334629593973, 0.1401462978491672], [0.1921623445370394, 0.1946791150120314], [0.1978893136119494, 0.20973229990189324], [0.21166186171716617, 0.22096207878964302], [0.2772152634098368, 0.30450501396836926], [0.3535510357776539, 0.3539468241054684], [0.3684484333172089, 0.4594657167105539], [0.47179169826168255, 0.5039259387026114], [0.5240156596044618, 0.5297284964210033], [0.5761222958952391, 0.5939079598482874], [0.6227719393769467, 0.6387544065631309], [0.6547971685831182, 0.6832235048546967], [0.7295612620852331, 0.7311675380530319], [0.7701580729262756, 0.8299919688290477], [0.8359510581889456, 0.8838586781038752], [0.9455024508024313, 0.9549759034696558]], 'trk_len_v': [0.6, 650], 'trk_distance_v': [0.0, 8], 'trk_score_v': [0.75, 1], 'trk_mcs_muon_mom_v': [0.2, 1.6]}

really good:  indiv = {'topological_score': [[0.052307352317246925, 0.07775164227849363], [0.08535226087532954, 0.08768314193702753], [0.09075754544331971, 0.1662908301911724], [0.20384627391912213, 0.21438014102245573], [0.21698002197071586, 0.2827538324165446], [0.29419778870689095, 0.3180228333000885], [0.3763178674908213, 0.39436196107625543], [0.4510690867907975, 0.4851400982434434], [0.49136145377338614, 0.5002828368973844], [0.5111435177328876, 0.6499442192697779], [0.7508658234426536, 0.7877024796157964], [0.8043905864005519, 0.8281000246665159], [0.8449044730726416, 0.8481819741680566], [0.8498376673761318, 0.9351364489475619]], 'trk_len_v': [0.6, 650], 'trk_distance_v': [[0.20339963782226889, 1.6967409600204038], [5.603380397478836, 7.387786623967383]], 'trk_score_v': [0.75, 1], 'trk_mcs_muon_mom_v': [[0.010696712976896096, 0.03692293294587081], [0.11600533990238021, 0.1439256378098273], [0.2061276483352451, 0.31588277226085815], [0.31847907291784544, 0.3627367049562322], [0.39692617043937517, 0.4656121888162448], [0.4691576390582082, 0.7678274459760566], [0.8558972478154522, 0.9324990994771399], [1.082552781066239, 1.2968131836406855], [1.3540642822424929, 1.4152389353422032], [1.4544861176754107, 1.5202948082297203], [1.5735186707968856, 1.5963721279724503]]}
really really good:  indiv = {'topological_score': [[0.20565590374138998, 0.4997647633595367], [0.5048460148775455, 0.5695564779780122], [0.739840436424238, 0.7855045833551402], [0.7920139603193892, 0.8833882144889352]], 'trk_len_v': [[43.055380554350286, 178.2178651793291], [198.1442994682086, 313.4399580087402], [320.1385035479308, 341.06593343610064], [421.9566945864534, 512.3650082646785], [536.5226222838405, 549.3556799688433], [615.3297136923468, 622.7032694134394]], 'trk_distance_v': [0.0, 8], 'trk_score_v': [0.75, 1], 'trk_mcs_muon_mom_v': [0, 1.6]}


@author: herbi
"""

from master import real_data_full, MC_data_full, columns_to_copy_Real, columns_to_copy_MC
from final import do_both, calculate_metric
from convert_to_binary_array import read_in
import heapq
import pandas as pd


def apply_cuts(df, cuts,copy_columns):
    # Start with a mask that includes all rows
    mask = pd.Series(True, index=df.index)

    for column, ranges in cuts.items():
        column_mask = pd.Series(False, index=df.index)

        if isinstance(ranges[0], tuple):

            for range_tuple in ranges:
                column_mask |= (df[column] >= range_tuple[0]) & (df[column] <= range_tuple[1])
        else:

            column_mask = (df[column] >= ranges[0]) & (df[column] <= ranges[1])

 
        mask &= column_mask

    new = df[mask]
    new = new[copy_columns].copy()
    return new


#new_MC = apply_cuts(MC_data_full, indiv, columns_to_copy_MC)
#new_real =  apply_cuts(real_data_full, indiv, columns_to_copy_Real)

def get_top_elements(array, n, threshold):
    # Filter the array based on the condition for the third value in 'score'
    filtered_elements = [elem for elem in array if elem['score'][2] > threshold]

    # Use nsmallest to get the top n elements based on the smallest first value in 'score'
    top_elements = heapq.nsmallest(n, filtered_elements, key=lambda item: item['score'][0])

    return top_elements

from useful_functions import change_indiv_to_tuple
import sys


indiv = {'topological_score': [0.0, 1.0], 'trk_len_v': [[99.76666700321279, 99.9841429860093], [175.64130415352767, 283.49497418630983], [284.59213353926043, 295.0757570676007], [337.9290252141481, 376.7956979486835], [465.27211620744964, 500.2829188366732]], 'trk_distance_v': [[0.9550914845998193, 2.550159900362039], [2.5995632894627487, 3.784875415588841], [4.006530020365533, 7.010304710169266]], 'trk_score_v': [0.75, 1], 'trk_mcs_muon_mom_v': [0.5610515159870249, 1.0535549302126943]}
indiv = {'topological_score': [[0.010943663145172366, 0.01624194161691117], [0.09113162254471241, 0.225315655678608], [0.33812522289506164, 0.3775202171600237], [0.5944088819868355, 0.6514385948987034], [0.6648445321855679, 0.6712611708731763], [0.7742973441215075, 0.7947618812675308], [0.8798610178595277, 0.9915752097914944]], 'trk_len_v': [0.6, 650], 'trk_distance_v': [[0.34535628554533915, 0.5978776621326451], [0.7252731552819576, 1.9811738994773958], [2.050140954137702, 2.872470613509428], [3.3208114326147573, 3.878848837787845], [4.424601664402546, 4.506088571480136], [5.128105761519606, 6.0267309485945155], [6.5742066636743495, 7.5546865372141365], [7.646666400350572, 7.895986440518355]], 'trk_score_v': [0.75, 1], 'trk_mcs_muon_mom_v': [[0.08263996773125602, 0.1180741772009819], [0.6662068999319818, 1.3292853961454874], [1.3455553144414674, 1.5610565707204183]]}
indiv = {'topological_score': [0.7, 0.9], 'trk_len_v': [0.6, 650], 'trk_distance_v': [[0.06369849956917761, 1.8644284460335303], [1.8922278674529966, 2.1790664883833877], [2.615724782008579, 2.920829081155114], [2.9964566034803175, 3.006100998063469], [3.3802339912276596, 4.118191905071383], [4.380811974594002, 4.6538569232647475], [4.732400702577313, 4.808842369282162], [5.268243180096821, 5.666626635996429], [5.672328771545283, 6.302632341765945], [6.347970477921233, 6.38048641850676], [6.622217093914209, 6.968775850597668], [7.0013295386606815, 7.350463101761461], [7.860446826806208, 7.906914746863745]], 'trk_score_v': [0.75, 1], 'trk_mcs_muon_mom_v': [0, 1.6]}
indiv = {'topological_score': [[0.8734279514881109, 1.0]], 'trk_len_v': [[0.6163932085037231, 5372.38818359375]], 'trk_distance_v': [[0.0, 8.0]], 'trk_score_v': [[0.75, 0.7975475824866088], [0.7975475824866088, 0.8150983004361365], [0.8150983004361365, 0.8929574260080927], [0.8929574260080927, 1.0]], 'trk_mcs_muon_mom_v': [[0.4602680213326816, 0.8827493060202833], [0.8827493060202833, 1.6]]}

def do_smth():
    new_pop = read_in('new_5_start.json')
    number = 0
    best = 1
    best_i = None
    print(len(new_pop))
    for elem in new_pop:
        if elem['score'][0] < best and elem['score'][2] > 0.1:
            best = elem['score'][0]
            best_i = elem
    print(best_i)


do_smth()



indiv = {'topological_score': [[0.058598886185362575, 0.06240106149714231], [0.12772334629593973, 0.1401462978491672], [0.1921623445370394, 0.1946791150120314], [0.1978893136119494, 0.20973229990189324], [0.21166186171716617, 0.22096207878964302], [0.2772152634098368, 0.30450501396836926], [0.3535510357776539, 0.3539468241054684], [0.3684484333172089, 0.4594657167105539], [0.47179169826168255, 0.5039259387026114], [0.5240156596044618, 0.5297284964210033], [0.5761222958952391, 0.5939079598482874], [0.6227719393769467, 0.6387544065631309], [0.6547971685831182, 0.6832235048546967], [0.7295612620852331, 0.7311675380530319], [0.7701580729262756, 0.8299919688290477], [0.8359510581889456, 0.8838586781038752], [0.9455024508024313, 0.9549759034696558]], 'trk_len_v': [0.6, 650], 'trk_distance_v': [0.0, 8], 'trk_score_v': [0.75, 1], 'trk_mcs_muon_mom_v': [0.2, 1.6]}

indiv = change_indiv_to_tuple(indiv)

print(indiv)




new_MC = apply_cuts(MC_data_full, indiv, columns_to_copy_MC)
new_real =  apply_cuts(real_data_full, indiv, columns_to_copy_Real)

sc = do_both(new_real, new_MC)
print(sc)

sc = calculate_metric(new_real,new_MC)
print(sc)

sys.exit()


